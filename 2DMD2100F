for _,v in next, getconnections(game:GetService("LogService").MessageOut) do
    v:Disable()
 end
 for _,v in next, getconnections(game:GetService("ScriptContext").Error) do
    v:Disable()
 end
 
 local Players = game:GetService("Players")
 local plr = Players.LocalPlayer
 
 if plr then
    for i,v in pairs(plr.Character:GetChildren()) do
       if v:IsA("LocalScript") and v.Name ~= "Animate" and v.Name ~= "PartyBillboard" and v.Name ~= "SpawnColorChanger" then
          v:Destroy()
       end
    end
 end
 
 local UNIATTEMPT = true
 local UIS = game:GetService("UserInputService")
 
 _G.MountainClimber = false
 _G.Speeder = false
 _G.LogBreakAura = false
 _G.OreBreakAura = false
 _G.Detection = false
 
 _G.GoldEsp = false
 _G.AduriteEsp = false
 _G.CrystalLodeEsp = false
 _G.IronNodeEsp = false
 _G.MeteorRockEsp = false
 _G.CrystalMeteorRockEsp = false
 
 
 local function GroupDetect()
    local player = game.Players.LocalPlayer
    local IDList = {1669567577, 300411622,  3333755037, 14921263, 623162005, 1308829163, 98002074, 4424327548, 436941963, 1925708573, 3552348976, 3323146867, 115122707, 4063747505, 3125360375, 94604520, 497623768, 1981993741, 503118072, 250143751, 1106395777, 461787425, 1217631755, 2930085196, 1378597258, 1515615413, 385307945, 946430143, 139190326, 740727479, 1497173687, 355732892, 406112510, 3485337395, 194067424, 52827750, 3325882377, 3392307522, 3450943869, 3414918338, 159413166, 1192166679, 725751368, 2520211653}
    while _G.Detection do
       if player and player.Character then
          local userId = player.userId
          for _, id in ipairs(IDList) do
             if userId == id then
                game.Players.LocalPlayer:Kick("Admin Detected")
             end
          end
       end
       wait(5)
    end
 end
 
 local function Mount()
    local player = game.Players.LocalPlayer
    while true do
       local humanoidWC = player.Character and player.Character:FindFirstChildOfClass("Humanoid")
       if _G.MountainClimber then
          if humanoidWC and humanoidWC.Health > 0 then
             humanoidWC.MaxSlopeAngle = 89.9
          else
             wait(1)
          end
       else
          if humanoidWC then
             humanoidWC.MaxSlopeAngle = 46
          end
          break
       end
       Wait()
    end
 end
 
 getgenv().killing = false
 getgenv().killing2 = false
 getgenv().killAuraRange = 20
 
 local function isAlive(plr)
    local plr = plr or game:GetService("Players").LocalPlayer
    if plr and plr.Character and ((plr.Character:FindFirstChild("Humanoid")) and (plr.Character:FindFirstChild("Humanoid") and plr.Character:FindFirstChild("Humanoid").Health > 0) and (plr.Character:FindFirstChild("HumanoidRootPart")) and (plr.Character:FindFirstChild("Head"))) then
       return true
    end
 end
 
 local function canBeTargeted(plr, doTeamCheck)
    if isAlive(plr) and plr ~= game:GetService("Players").LocalPlayer and (doTeamCheck and plr.Team ~= game:GetService("Players").LocalPlayer.Team or not doTeamCheck) and plr.Name ~= "valensoysantijajaja" and plr.Name ~= "SusLordCV" then
       return true
    end
    return false
 end
 
 local function useAura()
    spawn(function()
    game:GetService("RunService").RenderStepped:Connect(function()
    if getgenv().killing or getgenv().killing2 then
       for i, v in pairs(game:GetService("Players"):GetPlayers()) do
          if isAlive() and canBeTargeted(v, false) and (game:GetService("Players").LocalPlayer.Character.HumanoidRootPart.Position - v.Character.HumanoidRootPart.Position).magnitude < getgenv().killAuraRange then
             local attackTable = {
                [1] = game:GetService("Workspace")[v.Name].HumanoidRootPart,
             }
             game:GetService("ReplicatedStorage").Events.SwingTool:FireServer(attackTable)
          end
       end
    end
    end)
    end)
 end
 
 local States = {
     AutoAim = true,
 }
 local lockedPlayer = nil
 local Mouse = game.Players.LocalPlayer:GetMouse()
 local RunService = game:GetService("RunService")
 local Root = game.Players.LocalPlayer.Character.HumanoidRootPart
 local RootPos, MousePos
 
 function findNearestPlayer()
     local nearestPlayer
     local shortestDistance = math.huge
     for _, player in ipairs(game:GetService("Players"):GetPlayers()) do
         if player ~= game.Players.LocalPlayer then
             local character = player.Character
             local humanoidRootPart = character and character:FindFirstChild("HumanoidRootPart")
             if humanoidRootPart then
                 local distance = (Root.Position - humanoidRootPart.Position).Magnitude
                 if distance < shortestDistance then
                     shortestDistance = distance
                     nearestPlayer = humanoidRootPart
                 end
             end
         end
     end
     return nearestPlayer
 end
 
 RunService.RenderStepped:Connect(function()
     if getgenv().killing2 and Root then
         lockedPlayer = findNearestPlayer()
         if lockedPlayer then 
             RootPos, MousePos = Root.Position, lockedPlayer.Position - lockedPlayer.CFrame.LookVector * 0.03 
             pcall(function() 
                 if MousePos then 
                     Root.CFrame = CFrame.new(RootPos, Vector3.new(MousePos.X, RootPos.Y, MousePos.Z)) 
                 end 
             end) 
         end 
     end 
 end)
 
 task.spawn(function()
     while true do 
         task.wait() 
         pcall(function() 
             if getgenv().killing2 and lockedPlayer then 
                 if MousePos and RootPos then 
                     if MousePos then 
                         Root.CFrame = MousePos.CFrame*CFrame.new(0,0,3) 
                         pcall(function() 
                             game:GetService("Players").LocalPlayer.Character:FindFirstChildOfClass("Tool"):Activate() 
                         end) 
                     end 
                 end 
             end 
         end) 
     end 
 end)
 
 _G.af = {} -- Initialize _G.af
 
 _G.Speeder = function()
     if game.PlaceId == 10767870749 then
         speederup = 24
     else
         speederup = 17
     end
     spawn(
         function()
             _G.ae = true
             function speedup()
                 if game.Players.LocalPlayer.Character and game.Players.LocalPlayer.Character.Humanoid then
                     game.Players.LocalPlayer.Character.Humanoid.WalkSpeed = speederup
                 end
             end
             _G.af.WalkSpeedChanger =
                 _G.af.WalkSpeedChanger and _G.af.WalkSpeedChanger:Disconnect() and false or
                 game.Players.LocalPlayer.Character:WaitForChild("Humanoid"):GetPropertyChangedSignal(
                     "WalkSpeed"
                 ):Connect(speedup)
             _G.af.WalkSpeedAlawys =
                 _G.af.WalkSpeedAlawys and _G.af.WalkSpeedAlawys:Disconnect() and false or
                 game.Players.LocalPlayer.CharacterAdded:Connect(
                     function()
                         _G.af.WalkSpeedChanger =
                             _G.af.WalkSpeedChanger and _G.af.WalkSpeedChanger:Disconnect() and false or
                             game.Players.LocalPlayer.Character:WaitForChild("Humanoid"):GetPropertyChangedSignal(
                                 "WalkSpeed"
                             ):Connect(speedup)
                         speedup()
                     end
                 )
             speedup()
             while task.wait() do
                 if not _G.ae then
                     _G.af.WalkSpeedChanger =
                         _G.af.WalkSpeedChanger and _G.af.WalkSpeedChanger:Disconnect() and false or nil
                     _G.af.WalkSpeedAlawys = _G.af.WalkSpeedAlawys and _G.af.WalkSpeedAlawys:Disconnect() and false or nil
                     game.Players.LocalPlayer.Character.Humanoid.WalkSpeed = 16
                     return
                 end
             end
         end
     )
 end
 
 function Speeder()
     if game.PlaceId == 10767870749 then
         speederup = 24
     else
         speederup = 17
     end
     spawn(
         function()
             ae = true
             function speedup()
                 if game.Players.LocalPlayer.Character and game.Players.LocalPlayer.Character.Humanoid then
                     game.Players.LocalPlayer.Character.Humanoid.WalkSpeed = speederup
                 end
             end
             af.WalkSpeedChanger =
                 af.WalkSpeedChanger and af.WalkSpeedChanger:Disconnect() and false or
                 game.Players.LocalPlayer.Character:WaitForChild("Humanoid"):GetPropertyChangedSignal(
                     "WalkSpeed"
                 ):Connect(speedup)
             af.WalkSpeedAlawys =
                 af.WalkSpeedAlawys and af.WalkSpeedAlawys:Disconnect() and false or
                 game.Players.LocalPlayer.CharacterAdded:Connect(
                     function()
                         af.WalkSpeedChanger =
                             af.WalkSpeedChanger and af.WalkSpeedChanger:Disconnect() and false or
                             game.Players.LocalPlayer.Character:WaitForChild("Humanoid"):GetPropertyChangedSignal(
                                 "WalkSpeed"
                             ):Connect(speedup)
                         speedup()
                     end
                 )
             speedup()
             while task.wait() do
                 if not ae then
                     af.WalkSpeedChanger =
                         af.WalkSpeedChanger and af.WalkSpeedChanger:Disconnect() and false or nil
                     af.WalkSpeedAlawys = af.WalkSpeedAlawys and af.WalkSpeedAlawys:Disconnect() and false or nil
                     game.Players.LocalPlayer.Character.Humanoid.WalkSpeed = 16
                     return
                 end
             end
         end
     )
 end
 
 local function LogBreakAura()
    while _G.LogBreakAura do
       task.wait()
       for _, v in ipairs(workspace.Resources:GetChildren()) do
          if v:IsA("Model") and game.Players.LocalPlayer:DistanceFromCharacter(v:GetModelCFrame().Position) < 20 then
             local trunk = v:FindFirstChild("Trunk")
             local reference = v:FindFirstChild("Reference")
             local stump = v:FindFirstChild("Stump")
             local leaves = v:FindFirstChild("Leaves")
             local foliage = v:FindFirstChild("Foliage")
             local union = v:FindFirstChild("Union")
 
             local validTrees = {
                ["Small Tree"] = {trunk, reference},
                ["Dead Tree"] = {trunk, reference, trunk},
                ["Driftwood"] = {trunk, trunk, reference},
                ["Feather Tree"] = {reference, trunk},
                ["Swoll Tree"] = {trunk, reference},
                ["Sun Tree"] = {reference, trunk},
                ["Ancient Tree"] = {trunk, reference},
                ["Dave"] = {leaves, stump}
             }
 
             local validBushes = {
                ["Feather Bush"] = {stump, leaves},
                ["Sun Shrub"] = {leaves, stump},
                ["Bush"] = {stump, leaves},
                ["Petrified Bush"] = {stump, leaves},
                ["Big Bush"] = {foliage, reference, stump, foliage, union}
             }
 
             if validTrees[v.Name] then
                game:GetService("ReplicatedStorage").Events.SwingTool:FireServer(validTrees[v.Name])
             elseif validBushes[v.Name] then
                game:GetService("ReplicatedStorage").Events.SwingTool:FireServer(validBushes[v.Name])
             end
 
             task.wait()
          end
       end
    end
 end
 
 local function OreBreaker()
    while _G.OreBreakAura do
       task.wait()
       for _, v in ipairs(workspace.Resources:GetChildren()) do
          if v:IsA("Model") and game.Players.LocalPlayer:DistanceFromCharacter(v:GetModelCFrame().Position) < 20 then
             local smallRock = v:FindFirstChild("Small Rock")
             local reference = v:FindFirstChild("Reference")
             local largeRock = v:FindFirstChild("Large Rock")
             local stone = v:FindFirstChild("Stone")
             local rawMagnetite = v:FindFirstChild("Raw Magnetite")
             local crystalBit = v:FindFirstChild("Crystal Bit")
             local ice = v:FindFirstChild("Ice")
             local foliage = v:FindFirstChild("Foliage")
             local union = v:FindFirstChild("Union")
 
             local validOres = {
                ["Big Rock"] = {largeRock},
                ["Small Rock"] = {smallRock},
                ["Stone Node"] = {smallRock, reference},
                ["Gold Node"] = {reference, smallRock},
                ["Iron Node"] = {smallRock, reference},
                ["Adurite Node"] = {smallRock, reference},
                ["Adurite Rich Rock"] = {smallRock, reference},
                ["Crystal Lode"] = {stone, reference},
                ["Emerald Lode"] = {stone, stone, reference},
                ["Feather Stone"] = {foliage, reference},
                ["Ice Mound"] = {smallRock},
                ["Ice Chunk"] = {ice, reference},
                ["Iceberg"] = {ice, reference},
                ["Meteor Rock"] = {rawMagnetite, smallRock},
                ["Crystal Meteor Rock"] = {crystalBit, smallRock},
                ["Coal Node"] = {smallRock}
             }
 
             if validOres[v.Name] then
                game:GetService("ReplicatedStorage").Events.SwingTool:FireServer(validOres[v.Name])
             end
 
             task.wait()
          end
       end
    end
 end
 
 
 local function tpVoid()
    game:GetService("TeleportService"):Teleport(11879754496)
 end
 
 local function tpMain()
    game:GetService("TeleportService"):Teleport(11729688377)
 end

 -- Get the 'Workspace' service
 local Workspace = game:GetService("Workspace")
 
 -- Check if the 'Items' folder exists in the Workspace
 local ItemsFolder = Workspace:FindFirstChild("Items")
 if not ItemsFolder then
     error("Could not find an 'Items' folder in the Workspace.")
 end
 
 -- Function to create a BillboardGui for a part or model
 local function createBillboard(object)
     local billboardGui = Instance.new("BillboardGui")
     billboardGui.Name = object.Name .. " GUI"
     billboardGui.Adornee = object
     billboardGui.Size = UDim2.new(0, 100, 0, 50)
     billboardGui.StudsOffset = Vector3.new(0, 2, 0)
     billboardGui.AlwaysOnTop = true
 
     local textLabel = Instance.new("TextLabel")
     textLabel.Size = UDim2.new(1, 0, 1, 0)
     textLabel.Text = object.Name
     textLabel.BackgroundTransparency = 1 -- No background
     textLabel.TextColor3 = Color3.new(1, 1, 1) -- White text
     textLabel.TextSize = 30 -- Increased text size
     textLabel.Parent = billboardGui
 
     billboardGui.Parent = object
 end
 
 -- Function to remove all BillboardGuis
 local function removeAllBillboards()
     for _, object in pairs(ItemsFolder:GetChildren()) do
         if object:FindFirstChildWhichIsA("BillboardGui") then
             object:FindFirstChildWhichIsA("BillboardGui"):Destroy()
         end
     end
 end
 
 -- Function to toggle ESP on and off
 local function toggleESP()
     if _G.allitems10 then
         removeAllBillboards()
     else
         for _, object in ipairs(ItemsFolder:GetChildren()) do
             if object:IsA("BasePart") or object:IsA("Model") then
                 createBillboard(object)
             end
         end 
     end 
     _G.allitems10 = not _G.allitems10
 end
 
 local function allitems()
     local billboardGui = Instance.new("BillboardGui")
     billboardGui.Name = "allitems BG"
     billboardGui.Active = false
     billboardGui.AlwaysOnTop = true
     billboardGui.Brightness = 1
     billboardGui.DistanceLowerLimit = 0
     billboardGui.DistanceStep = 0
     billboardGui.DistanceUpperLimit = -1
     billboardGui.Enabled = true
     billboardGui.ExtentsOffset = Vector3.new(0, 0, 0)
     billboardGui.LightInfluence = 0
     billboardGui.MaxDistance = math.huge
     billboardGui.ResetOnSpawn = false
     billboardGui.Size = UDim2.new(0, 10, 0, 10)
     billboardGui.SizeOffset = Vector2.new(0, 0)
     billboardGui.AutoLocalize = true
 
     local textLabel = Instance.new("TextLabel")
     textLabel.Active = false
     textLabel.AnchorPoint = Vector2.new(0, 0)
     textLabel.AutomaticSize = Enum.AutomaticSize.None
     textLabel.BackgroundTransparency = 1
     textLabel.BorderSizePixel = 0
     textLabel.LayoutOrder = 0
     textLabel.Name = "TextLabel"
     textLabel.Position = UDim2.new(0, 0, 0, 0)
     textLabel.Rotation = 0
     textLabel.Size = UDim2.new(0.5, 0.5, 0.5, 0.5)
     textLabel.Visible = true
     textLabel.ZIndex = 1
     textLabel.LineHeight = 1
     textLabel.MaxVisibleGraphemes = -1
     textLabel.RichText = false
     textLabel.TextColor3 = Color3.new(1, 1, 1) -- White text
     textLabel.TextSize = 15
     textLabel.TextScaled = false
     textLabel.AutoLocalize = false
 
     local clonedBillboardGui = billboardGui:Clone()
     clonedBillboardGui.Parent = model
     
     local clonedTextLabel = textLabel:Clone()
     clonedTextLabel.Parent = clonedBillboardGui
 
 end
 
 while _G.allitems10 do
    wait(1)
 
    if not _G.allitems10 then
        for _, object in pairs(game.Workspace.Items:GetChildren()) do
            local allitemsBgs = object:FindFirstChild("allitems BG")
            if allitemsBgs then
                allitemsBgs:Destroy()
            end
        end
    else
        for _, object in pairs(game.Workspace.Items:GetChildren()) do
            if (object:IsA("Model") or object:IsA("BasePart")) and not object:FindFirstChild("Gold BG") then
                createBillboardAndLabel(object)
            end
        end 
    end 
 end 
 
 -- Get the 'Players' service
 local Players = game:GetService("Players")
 
 -- Function to create a BillboardGui for a player
 local function createBillboard(player)
     local character = player.Character
     if character then
         local humanoidRootPart = character:FindFirstChild("HumanoidRootPart")
         if humanoidRootPart then
             local billboardGui = Instance.new("BillboardGui")
             billboardGui.Name = player.Name .. " GUI"
             billboardGui.Adornee = humanoidRootPart
             billboardGui.Size = UDim2.new(0, 100, 0, 50)
             billboardGui.StudsOffset = Vector3.new(0, 2, 0)
             billboardGui.AlwaysOnTop = true
 
             local textLabel = Instance.new("TextLabel")
             textLabel.Size = UDim2.new(1, 0, 1, 0)
             textLabel.Text = player.Name
             textLabel.BackgroundTransparency = 1 -- No background
             textLabel.TextColor3 = Color3.new(1, 1, 1) -- White text
             textLabel.TextSize = 30 -- Increased text size
             textLabel.Parent = billboardGui
 
             billboardGui.Parent = humanoidRootPart
         end
     end
 end
 
 -- Function to remove all BillboardGuis from a player
 local function removeBillboard(player)
     local character = player.Character
     if character then
         local humanoidRootPart = character:FindFirstChild("HumanoidRootPart")
         if humanoidRootPart then
             local billboardGui = humanoidRootPart:FindFirstChild(player.Name .. " GUI")
             if billboardGui then
                 billboardGui:Destroy()
             end
         end
     end
 end
 
 local function niggersEsp()
     if _G.playerEsp then
         for _, player in ipairs(Players:GetPlayers()) do
             removeBillboard(player)
         end
     else
         for _, player in ipairs(Players:GetPlayers()) do
             createBillboard(player)
         end 
     end 
     _G.playerEsp = not _G.playerEsp
 end
 
 
 local function goldEsp()
    local billboardGui = Instance.new("BillboardGui")
    billboardGui.Name = "Gold BG"
    billboardGui.Active = false
    billboardGui.AlwaysOnTop = true
    billboardGui.Brightness = 1
    billboardGui.DistanceLowerLimit = 0
    billboardGui.DistanceStep = 0
    billboardGui.DistanceUpperLimit = -1
    billboardGui.Enabled = true
    billboardGui.ExtentsOffset = Vector3.new(0, 0, 0)
    billboardGui.LightInfluence = 0
    billboardGui.MaxDistance = inf
    billboardGui.ResetOnSpawn = false
    billboardGui.Size = UDim2.new(0, 10, 0, 10)
    billboardGui.SizeOffset = Vector2.new(0, 0)
    billboardGui.AutoLocalize = true
 
    local textLabel = Instance.new("TextLabel")
    textLabel.Active = false
    textLabel.AnchorPoint = Vector2.new(0, 0)
    textLabel.AutomaticSize = Enum.AutomaticSize.None
    textLabel.BackgroundTransparency = 1
    textLabel.BorderSizePixel = 0
    textLabel.LayoutOrder = 0
    textLabel.Name = "TextLabel"
    textLabel.Position = UDim2.new(0, 0, 0, 0)
    textLabel.Rotation = 0
    textLabel.Size = UDim2.new(0.5, 0.5, 0.5, 0.5)
    textLabel.Visible = true
    textLabel.ZIndex = 1
    textLabel.LineHeight = 1
    textLabel.MaxVisibleGraphemes = -1
    textLabel.RichText = false
    textLabel.Text = "Gold Node"
    textLabel.TextColor3 = Color3.new(1, 1, 0)
    textLabel.TextSize = 15
    textLabel.TextScaled = false
    textLabel.AutoLocalize = false
 
    local function createBillboardAndLabel(model)
       local clonedBillboardGui = billboardGui:Clone()
       clonedBillboardGui.Parent = model
 
       local clonedTextLabel = textLabel:Clone()
       clonedTextLabel.Parent = clonedBillboardGui
    end
 
    while _G.GoldEsp do
       wait(1)
 
       if not _G.GoldEsp then
          for _, model in pairs(game.Workspace.Resources:GetChildren()) do
             local goldBgs = model:FindFirstChild("Gold BG")
             if goldBgs then
                goldBgs:Destroy()
             end
          end
       else
          for _, model in pairs(game.Workspace.Resources:GetChildren()) do
             if model.Name == "Gold Node" and not model:FindFirstChild("Gold BG") then
                createBillboardAndLabel(model)
             end
          end
       end
    end
 end
 
 local function heartEsp()
    local billboardGui = Instance.new("BillboardGui")
    billboardGui.Name = "Heart BG"
    billboardGui.Active = false
    billboardGui.AlwaysOnTop = true
    billboardGui.Brightness = 1
    billboardGui.DistanceLowerLimit = 0
    billboardGui.DistanceStep = 0
    billboardGui.DistanceUpperLimit = -1
    billboardGui.Enabled = true
    billboardGui.ExtentsOffset = Vector3.new(0, 0, 0)
    billboardGui.LightInfluence = 0
    billboardGui.MaxDistance = inf
    billboardGui.ResetOnSpawn = false
    billboardGui.Size = UDim2.new(0, 10, 0, 10)
    billboardGui.SizeOffset = Vector2.new(0, 0)
    billboardGui.AutoLocalize = true
 
    local textLabel = Instance.new("TextLabel")
    textLabel.Active = false
    textLabel.AnchorPoint = Vector2.new(0, 0)
    textLabel.AutomaticSize = Enum.AutomaticSize.None
    textLabel.BackgroundTransparency = 1
    textLabel.BorderSizePixel = 0
    textLabel.LayoutOrder = 0
    textLabel.Name = "TextLabel"
    textLabel.Position = UDim2.new(0, 0, 0, 0)
    textLabel.Rotation = 0
    textLabel.Size = UDim2.new(0.5, 0.5, 0.5, 0.5)
    textLabel.Visible = true
    textLabel.ZIndex = 1
    textLabel.LineHeight = 1
    textLabel.MaxVisibleGraphemes = -1
    textLabel.RichText = false
    textLabel.Text = "Heart Node"
    textLabel.TextColor3 = Color3.new(1, 0, 0)
    textLabel.TextSize = 15
    textLabel.TextScaled = false
    textLabel.AutoLocalize = false
 
    local function createBillboardAndLabel(model)
       local clonedBillboardGui = billboardGui:Clone()
       clonedBillboardGui.Parent = model
 
       local clonedTextLabel = textLabel:Clone()
       clonedTextLabel.Parent = clonedBillboardGui
    end
 
    while _G.HeartEsp do
       wait(1)
 
       if not _G.HeartEsp then
          for _, model in pairs(game.Workspace.Resources:GetChildren()) do
             local heartBgs = model:FindFirstChild("Heart BG")
             if heartBgs then
                heartBgs:Destroy()
             end
          end
       else
          for _, model in pairs(game.Workspace.Hearts:GetChildren()) do
             if string.sub(model.Name, 1, 5) == "Heart" and not model:FindFirstChild("Heart BG") then
                createBillboardAndLabel(model)
             end
          end
       end
    end
end


 local function aduriteEsp()
    local billboardGui = Instance.new("BillboardGui")
    billboardGui.Name = "Adurite BG"
    billboardGui.Active = false
    billboardGui.AlwaysOnTop = true
    billboardGui.Brightness = 1
    billboardGui.DistanceLowerLimit = 0
    billboardGui.DistanceStep = 0
    billboardGui.DistanceUpperLimit = -1
    billboardGui.Enabled = true
    billboardGui.ExtentsOffset = Vector3.new(0, 0, 0)
    billboardGui.LightInfluence = 0
    billboardGui.MaxDistance = inf
    billboardGui.ResetOnSpawn = false
    billboardGui.Size = UDim2.new(0, 10, 0, 10)
    billboardGui.SizeOffset = Vector2.new(0, 0)
    billboardGui.AutoLocalize = true
 
    local textLabel = Instance.new("TextLabel")
    textLabel.Active = false
    textLabel.AnchorPoint = Vector2.new(0, 0)
    textLabel.AutomaticSize = Enum.AutomaticSize.None
    textLabel.BackgroundTransparency = 1
    textLabel.BorderSizePixel = 0
    textLabel.LayoutOrder = 0
    textLabel.Name = "TextLabel"
    textLabel.Position = UDim2.new(0, 0, 0, 0)
    textLabel.Rotation = 0
    textLabel.Size = UDim2.new(0.5, 0.5, 0.5, 0.5)
    textLabel.Visible = true
    textLabel.ZIndex = 1
    textLabel.LineHeight = 1
    textLabel.MaxVisibleGraphemes = -1
    textLabel.RichText = false
    textLabel.Text = "Adurite Node"
    textLabel.TextColor3 = Color3.new(103/255, 0, 0)
    textLabel.TextSize = 15
    textLabel.TextScaled = false
    textLabel.AutoLocalize = false
 
    local function createBillboardAndLabel(model)
       local clonedBillboardGui = billboardGui:Clone()
       clonedBillboardGui.Parent = model
 
       local clonedTextLabel = textLabel:Clone()
       clonedTextLabel.Parent = clonedBillboardGui
    end
 
    while _G.AduriteEsp do
       wait(1)
 
       if not _G.AduriteEsp then
          for _, model in pairs(game.Workspace.Resources:GetChildren()) do
             local aduriteBgs = model:FindFirstChild("Adurite BG")
             if aduriteBgs then
                aduriteBgs:Destroy()
             end
          end
       else
          for _, model in pairs(game.Workspace.Resources:GetChildren()) do
             if (model.Name == "Adurite Node" or model.Name == "Adurite Rich Rock") and not model:FindFirstChild("Adurite BG") then
                createBillboardAndLabel(model)
             end
          end
       end
    end
 end
 
 local function crystallodeEsp()
    local billboardGui = Instance.new("BillboardGui")
    billboardGui.Name = "Crystal Lode BG"
    billboardGui.Active = false
    billboardGui.AlwaysOnTop = true
    billboardGui.Brightness = 1
    billboardGui.DistanceLowerLimit = 0
    billboardGui.DistanceStep = 0
    billboardGui.DistanceUpperLimit = -1
    billboardGui.Enabled = true
    billboardGui.ExtentsOffset = Vector3.new(0, 0, 0)
    billboardGui.LightInfluence = 0
    billboardGui.MaxDistance = inf
    billboardGui.ResetOnSpawn = false
    billboardGui.Size = UDim2.new(0, 10, 0, 10)
    billboardGui.SizeOffset = Vector2.new(0, 0)
    billboardGui.AutoLocalize = true
 
    local textLabel = Instance.new("TextLabel")
    textLabel.Active = false
    textLabel.AnchorPoint = Vector2.new(0, 0)
    textLabel.AutomaticSize = Enum.AutomaticSize.None
    textLabel.BackgroundTransparency = 1
    textLabel.BorderSizePixel = 0
    textLabel.LayoutOrder = 0
    textLabel.Name = "TextLabel"
    textLabel.Position = UDim2.new(0, 0, 0, 0)
    textLabel.Rotation = 0
    textLabel.Size = UDim2.new(0.5, 0.5, 0.5, 0.5)
    textLabel.Visible = true
    textLabel.ZIndex = 1
    textLabel.LineHeight = 1
    textLabel.MaxVisibleGraphemes = -1
    textLabel.RichText = false
    textLabel.Text = "Crystal Lode"
    textLabel.TextColor3 = Color3.new(176, 241, 244)
    textLabel.TextSize = 15
    textLabel.TextScaled = false
    textLabel.AutoLocalize = false
 
    local function createBillboardAndLabel(model)
       local clonedBillboardGui = billboardGui:Clone()
       clonedBillboardGui.Parent = model
 
       local clonedTextLabel = textLabel:Clone()
       clonedTextLabel.Parent = clonedBillboardGui
    end
 
    while _G.CrystalLodeEsp do
       wait(1)
 
       if not _G.CrystalLodeEsp then
          for _, model in pairs(game.Workspace.Resources:GetChildren()) do
             local CrystalLodeBgs = model:FindFirstChild("Crystal Lode BG")
             if CrystalLodeBgs then
                CrystalLodeBgs:Destroy()
             end
          end
       else
          for _, model in pairs(game.Workspace.Resources:GetChildren()) do
             if (model.Name == "Crystal Lode") and not model:FindFirstChild("Crystal Lode BG") then
                createBillboardAndLabel(model)
             end
          end
       end
    end
 end
 
 local function OldGodEsp()
    local billboardGui = Instance.new("BillboardGui")
    billboardGui.Name = "Old God BG"
    billboardGui.Active = false
    billboardGui.AlwaysOnTop = true
    billboardGui.Brightness = 1
    billboardGui.DistanceLowerLimit = 0
    billboardGui.DistanceStep = 0
    billboardGui.DistanceUpperLimit = -1
    billboardGui.Enabled = true
    billboardGui.ExtentsOffset = Vector3.new(0, 0, 0)
    billboardGui.LightInfluence = 0
    billboardGui.MaxDistance = inf
    billboardGui.ResetOnSpawn = false
    billboardGui.Size = UDim2.new(0, 10, 0, 10)
    billboardGui.SizeOffset = Vector2.new(0, 0)
    billboardGui.AutoLocalize = true
 
    local textLabel = Instance.new("TextLabel")
    textLabel.Active = false
    textLabel.AnchorPoint = Vector2.new(0, 0)
    textLabel.AutomaticSize = Enum.AutomaticSize.None
    textLabel.BackgroundTransparency = 1
    textLabel.BorderSizePixel = 0
    textLabel.LayoutOrder = 0
    textLabel.Name = "TextLabel"
    textLabel.Position = UDim2.new(0, 0, 0, 0)
    textLabel.Rotation = 0
    textLabel.Size = UDim2.new(0.5, 0.5, 0.5, 0.5)
    textLabel.Visible = true
    textLabel.ZIndex = 1
    textLabel.LineHeight = 1
    textLabel.MaxVisibleGraphemes = -1
    textLabel.RichText = false
    textLabel.Text = "Old God"
    textLabel.TextColor3 = Color3.new(176, 241, 244)
    textLabel.TextSize = 15
    textLabel.TextScaled = false
    textLabel.AutoLocalize = false
 
    local function createBillboardAndLabel(model)
       local clonedBillboardGui = billboardGui:Clone()
       clonedBillboardGui.Parent = model
 
       local clonedTextLabel = textLabel:Clone()
       clonedTextLabel.Parent = clonedBillboardGui
    end
 
    while _G.OldGodEsp do
       wait(1)
 
       if not _G.OldGodEsp then
          for _, model in pairs(game.Workspace.Resources:GetChildren()) do
             local OldGodBgs = model:FindFirstChild("Old God BG")
             if OldGodBgs then
                OldGodBgs:Destroy()
             end
          end
       else
          for _, model in pairs(game.Workspace.Resources:GetChildren()) do
             if (model.Name == "Old God") and not model:FindFirstChild("Old God BG") then
                createBillboardAndLabel(model)
             end
          end
       end
    end
 end
 
 local function ironnodeEsp()
    local billboardGui = Instance.new("BillboardGui")
    billboardGui.Name = "Iron Node BG"
    billboardGui.Active = false
    billboardGui.AlwaysOnTop = true
    billboardGui.Brightness = 1
    billboardGui.DistanceLowerLimit = 0
    billboardGui.DistanceStep = 0
    billboardGui.DistanceUpperLimit = -1
    billboardGui.Enabled = true
    billboardGui.ExtentsOffset = Vector3.new(0, 0, 0)
    billboardGui.LightInfluence = 0
    billboardGui.MaxDistance = inf
    billboardGui.ResetOnSpawn = false
    billboardGui.Size = UDim2.new(0, 10, 0, 10)
    billboardGui.SizeOffset = Vector2.new(0, 0)
    billboardGui.AutoLocalize = true
 
    local textLabel = Instance.new("TextLabel")
    textLabel.Active = false
    textLabel.AnchorPoint = Vector2.new(0, 0)
    textLabel.AutomaticSize = Enum.AutomaticSize.None
    textLabel.BackgroundTransparency = 1
    textLabel.BorderSizePixel = 0
    textLabel.LayoutOrder = 0
    textLabel.Name = "TextLabel"
    textLabel.Position = UDim2.new(0, 0, 0, 0)
    textLabel.Rotation = 0
    textLabel.Size = UDim2.new(0.5, 0.5, 0.5, 0.5)
    textLabel.Visible = true
    textLabel.ZIndex = 1
    textLabel.LineHeight = 1
    textLabel.MaxVisibleGraphemes = -1
    textLabel.RichText = false
    textLabel.Text = "Iron Node"
    textLabel.TextColor3 = Color3.new(160, 95, 53)
    textLabel.TextSize = 15
    textLabel.TextScaled = false
    textLabel.AutoLocalize = false
 
    local function createBillboardAndLabel(model)
       local clonedBillboardGui = billboardGui:Clone()
       clonedBillboardGui.Parent = model
 
       local clonedTextLabel = textLabel:Clone()
       clonedTextLabel.Parent = clonedBillboardGui
    end
 
    while _G.IronNodeEsp do
       wait(1)
 
       if not _G.IronNodeEsp then
          for _, model in pairs(game.Workspace.Resources:GetChildren()) do
             local IronNodeBgs = model:FindFirstChild("Iron Node BG")
             if IronNodeBgs then
                IronNodeBgs:Destroy()
             end
          end
       else
          for _, model in pairs(game.Workspace.Resources:GetChildren()) do
             if (model.Name == "Iron Node") and not model:FindFirstChild("Iron Node BG") then
                createBillboardAndLabel(model)
             end
          end
       end
    end
 end
 
 local function meteorrockEsp()
    local billboardGui = Instance.new("BillboardGui")
    billboardGui.Name = "Meteor Rock BG"
    billboardGui.Active = false
    billboardGui.AlwaysOnTop = true
    billboardGui.Brightness = 1
    billboardGui.DistanceLowerLimit = 0
    billboardGui.DistanceStep = 0
    billboardGui.DistanceUpperLimit = -1
    billboardGui.Enabled = true
    billboardGui.ExtentsOffset = Vector3.new(0, 0, 0)
    billboardGui.LightInfluence = 0
    billboardGui.MaxDistance = inf
    billboardGui.ResetOnSpawn = false
    billboardGui.Size = UDim2.new(0, 10, 0, 10)
    billboardGui.SizeOffset = Vector2.new(0, 0)
    billboardGui.AutoLocalize = true
 
    local textLabel = Instance.new("TextLabel")
    textLabel.Active = false
    textLabel.AnchorPoint = Vector2.new(0, 0)
    textLabel.AutomaticSize = Enum.AutomaticSize.None
    textLabel.BackgroundTransparency = 1
    textLabel.BorderSizePixel = 0
    textLabel.LayoutOrder = 0
    textLabel.Name = "TextLabel"
    textLabel.Position = UDim2.new(0, 0, 0, 0)
    textLabel.Rotation = 0
    textLabel.Size = UDim2.new(0.5, 0.5, 0.5, 0.5)
    textLabel.Visible = true
    textLabel.ZIndex = 1
    textLabel.LineHeight = 1
    textLabel.MaxVisibleGraphemes = -1
    textLabel.RichText = false
    textLabel.Text = "Raw Magnetite"
    textLabel.TextColor3 = Color3.new(98, 37, 209)
    textLabel.TextSize = 15
    textLabel.TextScaled = false
    textLabel.AutoLocalize = false
 
    local function createBillboardAndLabel(model)
       local clonedBillboardGui = billboardGui:Clone()
       clonedBillboardGui.Parent = model
 
       local clonedTextLabel = textLabel:Clone()
       clonedTextLabel.Parent = clonedBillboardGui
    end
 
    while _G.MeteorRockEsp do
       wait(1)
 
       if not _G.MeteorRockEsp then
          for _, model in pairs(game.Workspace.Resources:GetChildren()) do
             local MeteorRockBgs = model:FindFirstChild("Meteor Rock BG")
             if MeteorRockBgs then
                MeteorRockBgs:Destroy()
             end
          end
       else
          for _, model in pairs(game.Workspace.Resources:GetChildren()) do
             if (model.Name == "Meteor Rock") and not model:FindFirstChild("Meteor Rock BG") then
                createBillboardAndLabel(model)
             end
          end
       end
    end
 end
 
 local function crystalmeteorrockEsp()
    local billboardGui = Instance.new("BillboardGui")
    billboardGui.Name = "Crystal Meteor Rock BG"
    billboardGui.Active = false
    billboardGui.AlwaysOnTop = true
    billboardGui.Brightness = 1
    billboardGui.DistanceLowerLimit = 0
    billboardGui.DistanceStep = 0
    billboardGui.DistanceUpperLimit = -1
    billboardGui.Enabled = true
    billboardGui.ExtentsOffset = Vector3.new(0, 0, 0)
    billboardGui.LightInfluence = 0
    billboardGui.MaxDistance = inf
    billboardGui.ResetOnSpawn = false
    billboardGui.Size = UDim2.new(0, 10, 0, 10)
    billboardGui.SizeOffset = Vector2.new(0, 0)
    billboardGui.AutoLocalize = true
 
    local textLabel = Instance.new("TextLabel")
    textLabel.Active = false
    textLabel.AnchorPoint = Vector2.new(0, 0)
    textLabel.AutomaticSize = Enum.AutomaticSize.None
    textLabel.BackgroundTransparency = 1
    textLabel.BorderSizePixel = 0
    textLabel.LayoutOrder = 0
    textLabel.Name = "TextLabel"
    textLabel.Position = UDim2.new(0, 0, 0, 0)
    textLabel.Rotation = 0
    textLabel.Size = UDim2.new(0.5, 0.5, 0.5, 0.5)
    textLabel.Visible = true
    textLabel.ZIndex = 1
    textLabel.LineHeight = 1
    textLabel.MaxVisibleGraphemes = -1
    textLabel.RichText = false
    textLabel.Text = "Crystal"
    textLabel.TextColor3 = Color3.new(170, 255, 255)
    textLabel.TextSize = 15
    textLabel.TextScaled = false
    textLabel.AutoLocalize = false
 
    local function createBillboardAndLabel(model)
       local clonedBillboardGui = billboardGui:Clone()
       clonedBillboardGui.Parent = model
 
       local clonedTextLabel = textLabel:Clone()
       clonedTextLabel.Parent = clonedBillboardGui
    end
 
    while _G.CrystalMeteorRockEsp do
       wait(1)
 
       if not _G.CrystalMeteorRockEsp then
          for _, model in pairs(game.Workspace:GetChildren()) do
             local CrystalMeteorRockBgs = model:FindFirstChild("Crystal Meteor Rock BG")
             if CrystalMeteorRockBgs then
                CrystalMeteorRockBgs:Destroy()
             end
          end
       else
          for _, model in pairs(game.Workspace:GetChildren()) do
             if (model.Name == "Crystal Meteor Rock") and not model:FindFirstChild("Crystal Meteor Rock BG") then
                createBillboardAndLabel(model)
             end
          end
       end
    end
 end
 
 getgenv().killing = false
 getgenv().killing2 = false
 getgenv().killAuraRange = 20
 
 local function isAlive(plr)
    local plr = plr or game:GetService("Players").LocalPlayer
    if plr and plr.Character and ((plr.Character:FindFirstChild("Humanoid")) and (plr.Character:FindFirstChild("Humanoid") and plr.Character:FindFirstChild("Humanoid").Health > 0) and (plr.Character:FindFirstChild("HumanoidRootPart")) and (plr.Character:FindFirstChild("Head"))) then
       return true
    end
 end
 
 local function canBeTargeted(plr, doTeamCheck)
    if isAlive(plr) and plr ~= game:GetService("Players").LocalPlayer and (doTeamCheck and plr.Team ~= game:GetService("Players").LocalPlayer.Team or not doTeamCheck) and plr.Name ~= "valensoysantijajaja" and plr.Name ~= "SusLordCV" then
       return true
    end
    return false
 end
 
 getgenv().killing = false
 getgenv().killing2 = false
 getgenv().killAuraRange = 20
 
 local function isAlive(plr)
    local plr = plr or game:GetService("Players").LocalPlayer
    if plr and plr.Character and ((plr.Character:FindFirstChild("Humanoid")) and (plr.Character:FindFirstChild("Humanoid") and plr.Character:FindFirstChild("Humanoid").Health > 0) and (plr.Character:FindFirstChild("HumanoidRootPart")) and (plr.Character:FindFirstChild("Head"))) then
       return true
    end
 end
 
 local function canBeTargeted(plr, doTeamCheck)
    if isAlive(plr) and plr ~= game:GetService("Players").LocalPlayer and (doTeamCheck and plr.Team ~= game:GetService("Players").LocalPlayer.Team or not doTeamCheck) and plr.Name ~= "valensoysantijajaja" and plr.Name ~= "SusLordCV" then
       return true
    end
    return false
 end
 
 local function useAura()
    spawn(function()
    game:GetService("RunService").RenderStepped:Connect(function()
    if getgenv().killing or getgenv().killing2 then
       for i, v in pairs(game:GetService("Players"):GetPlayers()) do
          if isAlive() and canBeTargeted(v, false) and (game:GetService("Players").LocalPlayer.Character.HumanoidRootPart.Position - v.Character.HumanoidRootPart.Position).magnitude < getgenv().killAuraRange then
             local attackTable = {
                [1] = game:GetService("Workspace")[v.Name].HumanoidRootPart,
             }
             game:GetService("ReplicatedStorage").Events.SwingTool:FireServer(attackTable)
          end
       end
    end
    end)
    end)
 end
 
 local States = {
     AutoAim = true,
 }
 local lockedPlayer = nil
 local Mouse = game.Players.LocalPlayer:GetMouse()
 local RunService = game:GetService("RunService")
 local Root = game.Players.LocalPlayer.Character.HumanoidRootPart
 local RootPos, MousePos
 
 function findNearestPlayer()
     local nearestPlayer
     local shortestDistance = math.huge
     for _, player in ipairs(game:GetService("Players"):GetPlayers()) do
         if player ~= game.Players.LocalPlayer then
             local character = player.Character
             local humanoidRootPart = character and character:FindFirstChild("HumanoidRootPart")
             if humanoidRootPart then
                 local distance = (Root.Position - humanoidRootPart.Position).Magnitude
                 if distance < shortestDistance then
                     shortestDistance = distance
                     nearestPlayer = humanoidRootPart
                 end
             end
         end
     end
     return nearestPlayer
 end
 
 RunService.RenderStepped:Connect(function()
     if getgenv().killing2 and Root then
         lockedPlayer = findNearestPlayer()
         if lockedPlayer then 
             RootPos, MousePos = Root.Position, lockedPlayer.Position - lockedPlayer.CFrame.LookVector * 0.03 
             pcall(function() 
                 if MousePos then 
                     Root.CFrame = CFrame.new(RootPos, Vector3.new(MousePos.X, RootPos.Y, MousePos.Z)) 
                 end 
             end) 
         end 
     end 
 end)
 
 task.spawn(function()
     while true do 
         task.wait() 
         pcall(function() 
             if getgenv().killing2 and lockedPlayer then 
                 if MousePos and RootPos then 
                     if MousePos then 
                         Root.CFrame = MousePos.CFrame*CFrame.new(0,0,3) 
                         pcall(function() 
                             game:GetService("Players").LocalPlayer.Character:FindFirstChildOfClass("Tool"):Activate() 
                         end) 
                     end 
                 end 
             end 
         end) 
     end 
 end)
 
 local UserInputService = game:GetService('UserInputService')
 local function isPlayerOnMobile()
     return UserInputService.TouchEnabled and not (UserInputService.KeyboardEnabled or UserInputService.GamepadEnabled)
 end

 local players = game:GetService("Players")
game:GetService("StarterGui"):SetCore("SendNotification", {
    Title = "Weclome!";
    Text = "Welcome, " .. players.LocalPlayer.DisplayName;
    Icon = "rbxthumb://type=AvatarHeadShot&id=" .. players.LocalPlayer.UserId .. "&w=180&h=180 true";
    Duration = 5
 })

 local OrionLib = loadstring(game:HttpGet(('https://raw.githubusercontent.com/shlexware/Orion/main/source')))()

 local Window = OrionLib:MakeWindow({Name = "testtttttt", HidePremium = false, SaveConfig = true, ConfigFolder = "OrionTest"})

 local playerTab = Window:MakeTab({
	Name = "Combat/Player",
	Icon = "rbxassetid://3610247188",
	PremiumOnly = false
})

local farmingTab = Window:MakeTab({
	Name = "Farming",
	Icon = "rbxassetid://3610247188",
	PremiumOnly = false
})

local miscTab = Window:MakeTab({
	Name = "Misc",
	Icon = "rbxassetid://3610247188",
	PremiumOnly = false
})

local worldTab = Window:MakeTab({
	Name = "World",
	Icon = "rbxassetid://3610247188",
	PremiumOnly = false
})

local espTab = Window:MakeTab({
	Name = "Esp",
	Icon = "rbxassetid://3610247188",
	PremiumOnly = false
})

playerTab:AddToggle({
    Name = "Kill Aura V1",
    Default = getgenv().killing,
    Callback = function(t)
        getgenv().killing = t
        useAura()
    end
})

playerTab:AddToggle({
    Name = "Kill Aura V2",
    Default = getgenv().killing,
    Callback = function(t)
        getgenv().killing2 = t
        useAura()
    end
})

playerTab:AddSlider({
	Name = "Kill Aura Range",
	Min = 1,
	Max = 25,
	Default = getgenv().killAuraRange,
	Color = Color3.fromRGB(255,255,255),
	Increment = 1,
	Callback = function(t)
		getgenv().killAuraRange = t
	end    
})


local States = {
    AutoAim = false,
}
playerTab:AddToggle({
    Name = "Auto BackTP Plr (Blatant), Use with killaura",
    Default = false,
    Callback = function(Value)
        States.AutoAim = Value
       if Value then
           game.Players.LocalPlayer.CharacterAdded:Connect(function(character)
               repeat wait() until character and character:FindFirstChild("Humanoid")
               Root = character:FindFirstChild("HumanoidRootPart")
               RootPos, MousePos = Root.Position, findNearestPlayer(Root.Position)
           end)
       end
   end,
})

playerTab:AddTextbox({
	Name = "Plr Name",
	Default = "Input Full Username Of Plr",
	TextDisappear = true,
	Callback = function(Text)
		targetPlayerName = Text
	end	  
})

playerTab:AddToggle({
    Name = "MountainClimber",
    Callback = function(Value)
    _G.MountainClimber = Value
    Mount()
    end,
 })
 
 playerTab:AddToggle({
    Name = "WaterWalker",
    Default = false,
    Callback = function(Value)
 if Value then
            _G.Speeder()
        else
            _G.ae = false
 end
    end,
 })
 
 playerTab:AddToggle({
    Name = "Admin Check (Kick LocalPlayer)",
    Default = false,
    Callback = function(Value)
    _G.Detection = Value
    GroupDetect()
    end,
 })

 playerTab:AddSlider({
	Name = "Speed",
	Min = 1,
	Max = 22.5,
	Default = 16,
	Color = Color3.fromRGB(255,255,255),
	Increment = 1,
	Callback = function(Value)
if Value then
        local setspeed = Value

        local WalkSpeedSpoof = getgenv().WalkSpeedSpoof
        local Disable = WalkSpeedSpoof and WalkSpeedSpoof.Disable
        if Disable then
            Disable()
        end

        local cloneref = cloneref or function(...)
            return ...
        end
    end
        local WalkSpeedSpoof = {}

        local Players = cloneref(game:GetService("Players"))
        if not Players.LocalPlayer then
            Players:GetPropertyChangedSignal("LocalPlayer"):Wait()
        end
        local lp = cloneref(Players.LocalPlayer)

        local split = string.split

        local GetDebugIdHandler = Instance.new("BindableFunction")
        local TempHumanoid = Instance.new("Humanoid")

        local cachedhumanoids = {}

        local CurrentHumanoid
        local newindexhook
        local indexhook

        function GetDebugIdHandler.OnInvoke(obj)
            if typeof(obj) == "Instance" then
                return obj:GetDebugId()
            else
                error("Expected an Instance.")
            end
        end

        local function GetDebugId(obj)
            return GetDebugIdHandler:Invoke(obj)
        end

        local function GetWalkSpeed(obj)
            TempHumanoid.WalkSpeed = obj
            return TempHumanoid.WalkSpeed
        end

        function cachedhumanoids:cacheHumanoid(DebugId, Humanoid)
            cachedhumanoids[DebugId] = {
                currentindex = indexhook(Humanoid, "WalkSpeed"),
                lastnewindex = nil
            }
            return self[DebugId]
        end

        indexhook = hookmetamethod(game, "__index", function(self, index)
            if not checkcaller() and typeof(self) == "Instance" then
                if self:IsA("Humanoid") then
                    local DebugId = GetDebugId(self)
                    local cached = cachedhumanoids[DebugId]

                    if self:IsDescendantOf(lp.Character) or cached then
                        if type(index) == "string" then
                            local cleanindex = split(index, "\0")[1]

                            if cleanindex == "WalkSpeed" then
                                if not cached then
                                    cached = cachedhumanoids:cacheHumanoid(DebugId, self)
                                end

                                if not (CurrentHumanoid and CurrentHumanoid:IsDescendantOf(game)) then
                                    CurrentHumanoid = cloneref(self)
                                end

                                return cached.lastnewindex or cached.currentindex
                            end
                        end
                    end
                end
            end

            return indexhook(self, index)
        end)

        newindexhook = hookmetamethod(game, "__newindex", function(self, index, newindex)
            if not checkcaller() and typeof(self) == "Instance" then
                if self:IsA("Humanoid") then
                    local DebugId = GetDebugId(self)
                    local cached = cachedhumanoids[DebugId]

                    if self:IsDescendantOf(lp.Character) or cached then
                        if type(index) == "string" then
                            local cleanindex = split(index, "\0")[1]

                            if cleanindex == "WalkSpeed" then
                                if not cached then
                                    cached = cachedhumanoids:cacheHumanoid(DebugId, self)
                                end

                                if not (CurrentHumanoid and CurrentHumanoid:IsDescendantOf(game)) then
                                    CurrentHumanoid = cloneref(self)
                                end
                                cached.lastnewindex = GetWalkSpeed(newindex)
                                return CurrentHumanoid.WalkSpeed
                            end
                        end
                    end
                end
            end

            return newindexhook(self, index, newindex)
        end)

        function WalkSpeedSpoof:Disable()
            WalkSpeedSpoof:RestoreWalkSpeed()
            hookmetamethod(game, "__index", indexhook)
            hookmetamethod(game, "__newindex", newindexhook)
            GetDebugIdHandler:Destroy()
            TempHumanoid:Destroy()
            table.clear(WalkSpeedSpoof)
            getgenv().WalkSpeedSpoof = nil
        end

        function WalkSpeedSpoof:GetHumanoid()
            return CurrentHumanoid or (function()
                local char = lp.Character
                local Humanoid = char and char:FindFirstChildWhichIsA("Humanoid") or nil

                if Humanoid then
                    cachedhumanoids:cacheHumanoid(Humanoid:GetDebugId(), Humanoid)
                    return cloneref(Humanoid)
                end
            end)()
        end

        function WalkSpeedSpoof:SetWalkSpeed(speed)
            local Humanoid = WalkSpeedSpoof:GetHumanoid()

            if Humanoid then
                Humanoid.WalkSpeed = speed
            end
        end

        function WalkSpeedSpoof:RestoreWalkSpeed()
            local Humanoid = WalkSpeedSpoof:GetHumanoid()

            if Humanoid then
                local cached = cachedhumanoids[Humanoid:GetDebugId()]

                if cached then
                    WalkSpeedSpoof:SetWalkSpeed(cached.lastnewindex or cached.currentindex)
                end
            end
        end

        getgenv().WalkSpeedSpoof = WalkSpeedSpoof

        if setspeed then
            WalkSpeedSpoof:SetWalkSpeed(setspeed)
        end
    end
})

farmingTab:AddToggle({
    Name = "Auto Break",
    Default = getgenv().autoSwing,
    Callback = function(t)
        getgenv().autoSwing = t
    end,
})

game:GetService("RunService").RenderStepped:Connect(function()
    if getgenv().autoSwing then
        for i,v in pairs(game:GetService("Workspace").Resources:GetChildren()) do
            if v and v.Name ~= "Barley" and v.Name ~= "Corn" and v.PrimaryPart then
                local distance = (game.Players.LocalPlayer.Character.HumanoidRootPart.Position - v.PrimaryPart.Position).magnitude
                if distance < 10 then
                    local attackTable = {
                        [1] = v.PrimaryPart
                    }
                    game:GetService("ReplicatedStorage").Events.SwingTool:FireServer(attackTable)
                end
            end
        end
    end
end)


     _G.pickupRadius = 10 -- Initialize _G.pickupRadius

_G.AutoPickUpItems = function()
    spawn(
        function()
            while _G.autopickupitems do
                wait()
                pcall(
                    function()
                        local n = game:GetService("Players").LocalPlayer.Character.HumanoidRootPart
                        local o = game:GetService("ReplicatedStorage")
                        for b, c in pairs(game:GetService("Workspace"):GetChildren()) do
                            if
                                c:FindFirstChild("Pickup") and c:IsA("BasePart") or
                                    c:IsA("UnionOpreation")
                             then
                                if (n.Position - c.Position).Magnitude < _G.pickupRadius then -- Use _G.pickupRadius for the pickup radius
                                    game:GetService("ReplicatedStorage").Events.Pickup:FireServer(c)
                                end
                            end
                        end
                        for b, c in pairs(game:GetService("Workspace").Items:GetChildren()) do
                            if
                                c:FindFirstChild("Pickup") and c:IsA("BasePart") or
                                    c:IsA("UnionOpreation")
                             then
                                if (n.Position - c.Position).Magnitude < _G.pickupRadius then -- Use _G.pickupRadius for the pickup radius
                                    game:GetService("ReplicatedStorage").Events.Pickup:FireServer(c)
                                end
                            end
                        end
                    end
                )
            end
        end
    )
end

farmingTab:AddToggle({
	Name = "Auto Pickup",
	Default = false,
	Callback = function(Value)
        _G.autopickupitems = Value
        if Value then 
            _G.AutoPickUpItems()
        end
    end,
 })

 farmingTab:AddSlider({
	Name = "Slider",
	Min = 0,
	Max = 25,
	_G.pickupRadius,
	Color = Color3.fromRGB(255,255,255),
	Increment = 1,
	Callback = function(Value)
		_G.pickupRadius = Value 
	end,
})

OrionLib:Init()

espTab:AddToggle({
    Name = "Heart Esp",
    Default = false,
    Callback = function(Value)
            _G.HeartEsp = Value
            heartEsp()
        end,
})
